import {
  CreateAlunoRequest,
  EditAlunoRequest,
} from "../models/interfaces/AlunoRequest";

import prismaClient from "../prisma";

class CreateAlunoService {
  async execute({
    nome,
    foto,
    cpf,
    numeroNIS,
    rg,
    orgaoExpedidorRg,
    dataNascimento,
    email,
    telefoneResidencia,
    telefoneFixo,
    resideOutros,
    escolaAnterior,
    consideracaoFamiliar,
    cor_id,
    genero_id,
    cidade_id,
    estado_id,
    nacionalidade_id,
    nomeMae,
    cpfMae,
    rgMae,
    orgaoExpedidorRgMae,
    dataNascimentoMae,
    resideMae,
    profissaoMae,
    trabalhoMae,
    telefoneTrabalhoMae,
    nomePai,
    cpfPai,
    rgPai,
    orgaoExpedidorRgPai,
    dataNascimentoPai,
    residePai,
    profissaoPai,
    trabalhoPai,
    telefoneTrabalhoPai,
    acompanhamentoEspecialista,
    acompanhamentoEspecialistaPergunta,
    alergiaMedicamento,
    alergiaMedicamentoPergunta,
    asma,
    avisarNome1,
    avisarNome2,
    diabetes,
    diabetesInsulina,
    doencaCatapora,
    doencaCaxumba,
    doencaCongenita,
    doencaCoqueluche,
    doencaOutro,
    doencaRubeola,
    doencaSarampo,
    epilepsia,
    epilepsiaTratamento,
    hipertensao,
    medicacaoEspecifica,
    medicacaoEspecificaPergunta,
    necessidadeAuditiva,
    necessidadeAutismo,
    necessidadeClinica,
    necessidadeClinicaEndereco,
    necessidadeClinicaTelefone,
    necessidadeMotora,
    necessidadeSindromeDown,
    necessidadeTDA,
    necessidadeTDAH,
    necessidadeTDO,
    necessidadeVisual,
    parentesco1,
    parentesco2,
    parentescoTelefone1,
    parentescoTelefone2,
    planoSaude,
    planoSaudePergunta,
    tratamentoMedico,
    tratamentoMedicoPergunta,
  }: CreateAlunoRequest) {
    const aluno = await prismaClient.aluno.create({
      data: {
        ativo: true,
        nome: nome,
        foto: foto,
        cpf: cpf,
        numeroNIS: numeroNIS,
        rg: rg,
        orgaoExpedidorRg: orgaoExpedidorRg,
        dataNascimento: dataNascimento,
        email: email,
        telefoneResidencia: telefoneResidencia,
        telefoneFixo: telefoneFixo,
        resideOutros: resideOutros,
        escolaAnterior: escolaAnterior,
        consideracaoFamiliar: consideracaoFamiliar,
        cor_id: cor_id,
        genero_id: genero_id,
        cidade_id: cidade_id,
        estado_id: estado_id,
        nacionalidade_id: nacionalidade_id,
        nomeMae: nomeMae,
        cpfMae: cpfMae,
        rgMae: rgMae,
        orgaoExpedidorRgMae: orgaoExpedidorRgMae,
        dataNascimentoMae: dataNascimentoMae,
        resideMae: resideMae,
        profissaoMae: profissaoMae,
        trabalhoMae: trabalhoMae,
        telefoneTrabalhoMae: telefoneTrabalhoMae,
        nomePai: nomePai,
        cpfPai: cpfPai,
        rgPai: rgPai,
        orgaoExpedidorRgPai: orgaoExpedidorRgPai,
        dataNascimentoPai: dataNascimentoPai,
        residePai: residePai,
        profissaoPai: profissaoPai,
        trabalhoPai: trabalhoPai,
        telefoneTrabalhoPai: telefoneTrabalhoPai,
        acompanhamentoEspecialista: acompanhamentoEspecialista,
        acompanhamentoEspecialistaPergunta: acompanhamentoEspecialistaPergunta,
        alergiaMedicamento: alergiaMedicamento,
        alergiaMedicamentoPergunta: alergiaMedicamentoPergunta,
        asma: asma,
        avisarNome1: avisarNome1,
        avisarNome2: avisarNome2,
        diabetes: diabetes,
        diabetesInsulina: diabetesInsulina,
        doencaCatapora: doencaCatapora,
        doencaCaxumba: doencaCaxumba,
        doencaCongenita: doencaCongenita,
        doencaCoqueluche: doencaCoqueluche,
        doencaOutro: doencaOutro,
        doencaRubeola: doencaRubeola,
        doencaSarampo: doencaSarampo,
        epilepsia: epilepsia,
        epilepsiaTratamento: epilepsiaTratamento,
        hipertensao: hipertensao,
        medicacaoEspecifica: medicacaoEspecifica,
        medicacaoEspecificaPergunta: medicacaoEspecificaPergunta,
        necessidadeAuditiva: necessidadeAuditiva,
        necessidadeAutismo: necessidadeAutismo,
        necessidadeClinica: necessidadeClinica,
        necessidadeClinicaEndereco: necessidadeClinicaEndereco,
        necessidadeClinicaTelefone: necessidadeClinicaTelefone,
        necessidadeMotora: necessidadeMotora,
        necessidadeSindromeDown: necessidadeSindromeDown,
        necessidadeTDA: necessidadeTDA,
        necessidadeTDAH: necessidadeTDAH,
        necessidadeTDO: necessidadeTDO,
        necessidadeVisual: necessidadeVisual,
        parentesco1: parentesco1,
        parentesco2: parentesco2,
        parentescoTelefone1: parentescoTelefone1,
        parentescoTelefone2: parentescoTelefone2,
        planoSaude: planoSaude,
        planoSaudePergunta: planoSaudePergunta,
        tratamentoMedico: tratamentoMedico,
        tratamentoMedicoPergunta: tratamentoMedicoPergunta,
      },
    });
    return aluno;
  }
}

class EditAlunoService {
  async execute({
    id,
    nome,
    foto,
    cpf,
    numeroNIS,
    rg,
    orgaoExpedidorRg,
    dataNascimento,
    email,
    telefoneResidencia,
    telefoneFixo,
    resideOutros,
    escolaAnterior,
    consideracaoFamiliar,
    cor_id,
    genero_id,
    cidade_id,
    estado_id,
    nacionalidade_id,
    nomeMae,
    cpfMae,
    rgMae,
    orgaoExpedidorRgMae,
    dataNascimentoMae,
    resideMae,
    profissaoMae,
    trabalhoMae,
    telefoneTrabalhoMae,
    nomePai,
    cpfPai,
    rgPai,
    orgaoExpedidorRgPai,
    dataNascimentoPai,
    residePai,
    profissaoPai,
    trabalhoPai,
    telefoneTrabalhoPai,
    acompanhamentoEspecialista,
    acompanhamentoEspecialistaPergunta,
    alergiaMedicamento,
    alergiaMedicamentoPergunta,
    asma,
    avisarNome1,
    avisarNome2,
    diabetes,
    diabetesInsulina,
    doencaCatapora,
    doencaCaxumba,
    doencaCongenita,
    doencaCoqueluche,
    doencaOutro,
    doencaRubeola,
    doencaSarampo,
    epilepsia,
    epilepsiaTratamento,
    hipertensao,
    medicacaoEspecifica,
    medicacaoEspecificaPergunta,
    necessidadeAuditiva,
    necessidadeAutismo,
    necessidadeClinica,
    necessidadeClinicaEndereco,
    necessidadeClinicaTelefone,
    necessidadeMotora,
    necessidadeSindromeDown,
    necessidadeTDA,
    necessidadeTDAH,
    necessidadeTDO,
    necessidadeVisual,
    parentesco1,
    parentesco2,
    parentescoTelefone1,
    parentescoTelefone2,
    planoSaude,
    planoSaudePergunta,
    tratamentoMedico,
    tratamentoMedicoPergunta,
  }: EditAlunoRequest) {
    const alunoExists = await prismaClient.aluno.findFirst({
      where: {
        id: id,
      },
    });
    if (!alunoExists) {
      throw new Error("Aluno n√£o encontrado!");
    }
    const alunoEdited = await prismaClient.aluno.update({
      where: {
        id: id,
      },
      data: {
        nome: nome,
        foto: foto,
        cpf: cpf,
        numeroNIS: numeroNIS,
        rg: rg,
        orgaoExpedidorRg: orgaoExpedidorRg,
        dataNascimento: dataNascimento,
        email: email,
        telefoneResidencia: telefoneResidencia,
        telefoneFixo: telefoneFixo,
        resideOutros: resideOutros,
        escolaAnterior: escolaAnterior,
        consideracaoFamiliar: consideracaoFamiliar,
        cor_id: cor_id,
        genero_id: genero_id,
        cidade_id: cidade_id,
        estado_id: estado_id,
        nacionalidade_id: nacionalidade_id,
        nomeMae: nomeMae,
        cpfMae: cpfMae,
        rgMae: rgMae,
        orgaoExpedidorRgMae: orgaoExpedidorRgMae,
        dataNascimentoMae: dataNascimentoMae,
        resideMae: resideMae,
        profissaoMae: profissaoMae,
        trabalhoMae: trabalhoMae,
        telefoneTrabalhoMae: telefoneTrabalhoMae,
        nomePai: nomePai,
        cpfPai: cpfPai,
        rgPai: rgPai,
        orgaoExpedidorRgPai: orgaoExpedidorRgPai,
        dataNascimentoPai: dataNascimentoPai,
        residePai: residePai,
        profissaoPai: profissaoPai,
        trabalhoPai: trabalhoPai,
        telefoneTrabalhoPai: telefoneTrabalhoPai,
        acompanhamentoEspecialista: acompanhamentoEspecialista,
        acompanhamentoEspecialistaPergunta: acompanhamentoEspecialistaPergunta,
        alergiaMedicamento: alergiaMedicamento,
        alergiaMedicamentoPergunta: alergiaMedicamentoPergunta,
        asma: asma,
        avisarNome1: avisarNome1,
        avisarNome2: avisarNome2,
        diabetes: diabetes,
        diabetesInsulina: diabetesInsulina,
        doencaCatapora: doencaCatapora,
        doencaCaxumba: doencaCaxumba,
        doencaCongenita: doencaCongenita,
        doencaCoqueluche: doencaCoqueluche,
        doencaOutro: doencaOutro,
        doencaRubeola: doencaRubeola,
        doencaSarampo: doencaSarampo,
        epilepsia: epilepsia,
        epilepsiaTratamento: epilepsiaTratamento,
        hipertensao: hipertensao,
        medicacaoEspecifica: medicacaoEspecifica,
        medicacaoEspecificaPergunta: medicacaoEspecificaPergunta,
        necessidadeAuditiva: necessidadeAuditiva,
        necessidadeAutismo: necessidadeAutismo,
        necessidadeClinica: necessidadeClinica,
        necessidadeClinicaEndereco: necessidadeClinicaEndereco,
        necessidadeClinicaTelefone: necessidadeClinicaTelefone,
        necessidadeMotora: necessidadeMotora,
        necessidadeSindromeDown: necessidadeSindromeDown,
        necessidadeTDA: necessidadeTDA,
        necessidadeTDAH: necessidadeTDAH,
        necessidadeTDO: necessidadeTDO,
        necessidadeVisual: necessidadeVisual,
        parentesco1: parentesco1,
        parentesco2: parentesco2,
        parentescoTelefone1: parentescoTelefone1,
        parentescoTelefone2: parentescoTelefone2,
        planoSaude: planoSaude,
        planoSaudePergunta: planoSaudePergunta,
        tratamentoMedico: tratamentoMedico,
        tratamentoMedicoPergunta: tratamentoMedicoPergunta,
        updated_at: new Date().toISOString(),
      },
    });

    return alunoEdited;
  }
}

class GetEditAlunoService {
  async execute(aluno_id: string) {
    const aluno = await prismaClient.aluno.findUnique({
      where: {
        id: aluno_id,
      },
      select: {
        id: true,
        nome: true,
        foto: true,
        cpf: true,
        numeroNIS: true,
        rg: true,
        orgaoExpedidorRg: true,
        dataNascimento: true,
        email: true,
        telefoneResidencia: true,
        telefoneFixo: true,
        resideOutros: true,
        escolaAnterior: true,
        consideracaoFamiliar: true,
        cor_id: true,
        genero_id: true,
        cidade_id: true,
        estado_id: true,
        nacionalidade_id: true,
        nomeMae: true,
        cpfMae: true,
        rgMae: true,
        orgaoExpedidorRgMae: true,
        dataNascimentoMae: true,
        resideMae: true,
        profissaoMae: true,
        trabalhoMae: true,
        telefoneTrabalhoMae: true,
        nomePai: true,
        cpfPai: true,
        rgPai: true,
        orgaoExpedidorRgPai: true,
        dataNascimentoPai: true,
        residePai: true,
        profissaoPai: true,
        trabalhoPai: true,
        telefoneTrabalhoPai: true,
        acompanhamentoEspecialista: true,
        acompanhamentoEspecialistaPergunta: true,
        alergiaMedicamento: true,
        alergiaMedicamentoPergunta: true,
        asma: true,
        avisarNome1: true,
        avisarNome2: true,
        diabetes: true,
        diabetesInsulina: true,
        doencaCatapora: true,
        doencaCaxumba: true,
        doencaCongenita: true,
        doencaCoqueluche: true,
        doencaOutro: true,
        doencaRubeola: true,
        doencaSarampo: true,
        epilepsia: true,
        epilepsiaTratamento: true,
        hipertensao: true,
        medicacaoEspecifica: true,
        medicacaoEspecificaPergunta: true,
        necessidadeAuditiva: true,
        necessidadeAutismo: true,
        necessidadeClinica: true,
        necessidadeClinicaEndereco: true,
        necessidadeClinicaTelefone: true,
        necessidadeMotora: true,
        necessidadeSindromeDown: true,
        necessidadeTDA: true,
        necessidadeTDAH: true,
        necessidadeTDO: true,
        necessidadeVisual: true,
        parentesco1: true,
        parentesco2: true,
        parentescoTelefone1: true,
        parentescoTelefone2: true,
        planoSaude: true,
        planoSaudePergunta: true,
        tratamentoMedico: true,
        tratamentoMedicoPergunta: true,
        ativo: true,
      },
    });

    return aluno;
  }
  catch(error) {
    console.error("Error fetching aluno:", error);
    throw new Error("Failed to fetch aluno");
  }
}

class ListAlunoService {
  async execute() {
    const aluno = await prismaClient.aluno.findMany({
      where: {
        ativo: true,
      },
      select: {
        id: true,
        nome: true,
        nomeMae: true,
        nomePai: true,
        ativo: true,
      },
      orderBy: {
        nome: "asc",
      },
    });
    return aluno;
  }
}

export {
  CreateAlunoService,
  EditAlunoService,
  GetEditAlunoService,
  ListAlunoService,
};
